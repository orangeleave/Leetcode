class Solution {
    public String largestNumber(int[] nums) {
        if (nums == null || nums.length == 0) {
            return "";
        }
        
        // Convert int array into string array,
        // so that we can use s2.compareTo(s1) to sort the string array
        String[] strs = new String[nums.length];
        for (int i = 0; i < nums.length; i++) {
            strs[i] = String.valueOf(nums[i]);
        }
        
        // Create a new comparator to sort the new string array lexicographically
        // Override the Comparator Interface
        Comparator<String> comp = new Comparator<String>() {
            @Override
            public int compare(String str1, String str2) {
                String s1 = str1 + str2;
                String s2 = str2 + str1;
                return s2.compareTo(s1);
            }
        };
        
        Arrays.sort(strs, comp);
        
        // Note there's an edge case that the string array only contains a bunch of zero
        // Since we've sorted the array already, so we only need to check the 1st char of 1st element
        if (strs[0].charAt(0) == '0') {
            return "0";
        }
        
        StringBuilder sb = new StringBuilder();
        for (String str : strs) {
            sb.append(str);
        }
        return sb.toString();
    }
}
