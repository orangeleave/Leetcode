/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */

// Written on 11/02/2016 (iteratively)
public class Solution {
    public ListNode reverseList(ListNode head) {
        ListNode previous = null;
        while (head != null) {
            ListNode next = head.next;
            head.next = previous;
            previous = head;
            head = next;
        }
        return previous;
    }
}

// Written on 11/02/2016 (recursively)
public class Solution {
    public ListNode reverseList(ListNode head) {
        return reverseListAux(head, null);
    }
    
    private ListNode reverseListAux(ListNode head, ListNode previous) {
        if (head == null)   return previous;
        ListNode next = head.next;
        head.next = previous;
        previous = head;
        return reverseListAux(next, head);
    }
}


 /* Method 1: iteratively
public class Solution {
    public ListNode reverseList(ListNode head) {
        ListNode newHead = null;
        while (head != null) {
            ListNode next = head.next;
            head.next = newHead;
            newHead = head;
            head = next;
        }
        return newHead;
    }
}
*/

/* Method 2: recursively
public class Solution {
    public ListNode reverseList(ListNode head) {
        return reverseListAux(head, null);
    }
    private ListNode reverseListAux(ListNode head, ListNode newHead) {
        if (head == null)    return newHead;
        ListNode next = head.next;
        head.next = newHead;
        newHead = next;
        return reverseListAux(next, head);
    }
}
*/
