public class Solution {
//prunning
    public int maxProduct(String[] words) {
        int res = 0;
        Arrays.sort(words, new Comparator<String>() {
            public int compare(String a, String b) {
                return b.length() - a.length();
            }
        });
        int value[] = new int[words.length];
        for (int i = 0; i < value.length; i++) {
            for (char c : words[i].toCharArray()) {
                value[i] |= 1 << (c - 'a');
            }
        }
        for (int i = 0; i < words.length; i++) {
            if (words[i].length() * words[i].length() <= res)   break;
            for (int j = 1; j < words.length; j++) {
                if ((value[i] & value[j]) == 0) {
                    res = Math.max(res, words[i].length() * words[j].length());
                    break;
                }
            }
        }
        return res;
    }

//original version
    public int maxProduct(String[] words) {
        if (words == null || words.length == 0)     return 0;
        int[] value = new int[words.length];
        for (int i = 0; i < value.length; i++) {
            String word = words[i];
            for (int j = 0; j < word.length(); j++) {
                value[i] |= 1 << (word.charAt(j) - 'a');
            }
        }
        int res = 0;
        for (int i = 0; i < words.length; i++) {
            for (int j = i; j < words.length; j++) {
                if ((value[i] & value[j]) == 0) {
                    res = Math.max(res, words[i].length() * words[j].length());
                }
            }
        }
        return res;
    }
}
