/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Codec {
    // Spliter is for cases of "-1", "11" -like values
    private String spliter = ",";
    private String nullNode = "X";

    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        StringBuilder sb = new StringBuilder();
        buildString(sb, root);
        return sb.toString();
    }
    public void buildString(StringBuilder sb, TreeNode root) {
        if (root == null) {
            sb.append(nullNode);
            sb.append(spliter);
        } else {
            sb.append(root.val);
            sb.append(spliter);
            buildString(sb, root.left);
            buildString(sb, root.right);
        }
        return;
    }

    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        Queue<String> Q = new LinkedList<>();
        String[] strs = data.split(spliter);
        Q.addAll(Arrays.asList(strs));
        return buildTree(Q);
    }
    public TreeNode buildTree(Queue<String> Q) {
        String val = Q.poll();
        if (val.equals(nullNode)) {
            return null;
        } else {
            TreeNode node = new TreeNode(Integer.valueOf(val));
            node.left = buildTree(Q);
            node.right = buildTree(Q);
            return node;
        }
    }
}

// Your Codec object will be instantiated and called as such:
// Codec codec = new Codec();
// codec.deserialize(codec.serialize(root));
