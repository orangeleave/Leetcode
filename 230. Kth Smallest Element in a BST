public class Solution {
//improved version
    public int kthSmallest(TreeNode root, int k) {
        int countLeft = count(root.left);
        if (countLeft < k - 1) {
            return kthSmallest(root.right, k - 1 - countLeft);
        }
        if (countLeft > k - 1) {
            return kthSmallest(root.left, k);
        }
        return root.val;
    }
    private int count(TreeNode root) {
        if (root == null)   return 0;
        return 1 + count(root.left) + count(root.right);
    }
    
//old version
    public int kthSmallest(TreeNode root, int k) {
        while (root != null) {
            int countLeft = count(root.left);
            if (countLeft == k - 1)     return root.val;
            if (countLeft < k - 1) {
                k = k - countLeft - 1;
                root = root.right;
            }
            else if (countLeft > k - 1) {
                root = root.left;
            }
        }
        return -1;
    }
    private int count(TreeNode root) {
        if (root == null)   return 0;
        return 1 + count(root.left) + count(root.right);
    }
}
