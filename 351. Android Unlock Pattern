public class Solution {
    public int numberOfPatterns(int m, int n) {
        int[][] skip = new int[10][10];
        skip[1][3] = skip[3][1] = 2;
        skip[1][7] = skip[7][1] = 4;
        skip[3][9] = skip[9][3] = 6;
        skip[7][9] = skip[9][7] = 8;
        skip[1][9] = skip[9][1] = skip[3][7] = skip[7][3] = skip[2][8] = skip[8][2] = skip[4][6] = skip[6][4] = 5;
        int res = 0;
        boolean[] selected = new boolean[10];
        for (int i = m; i <= n; i++) {
            res += backtrack(skip, selected, 1, i - 1) * 4;
            res += backtrack(skip, selected, 5, i - 1);
            res += backtrack(skip, selected, 2, i - 1) * 4;
        }
        return res;
    }
    private int backtrack(int[][] skip, boolean[] selected, int key, int remain) {
        if (remain < 0)     return 0;
        if (remain == 0)    return 1;
        int res = 0;
        selected[key] = true;
        for (int i = 1; i <= 9; i++) {
            if (!selected[i] && (skip[i][key] == 0 || selected[skip[i][key]]))
                res += backtrack(skip, selected, i, remain - 1);
        }
        selected[key] = false;
        return res;
    }
}
