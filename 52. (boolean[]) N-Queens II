public class Solution {
    int res = 0;
    public int totalNQueens(int n) {
        boolean[] cols = new boolean[n];
        boolean[] diag1 = new boolean[2 * n];
        boolean[] diag2 = new boolean[2 * n];
        backtrack(cols, diag1, diag2, 0, n);
        return res;
    }
    private void backtrack(boolean[] cols, boolean[] diag1, boolean[] diag2, int row, int n) {
        if (row == n) {
            res++;
        } else {
            for (int queen = 0; queen < n; queen++) {
                int i = row + queen, j = row - queen + n;
                if (cols[queen] || diag1[i] || diag2[j])    continue;
                cols[queen] = true;
                diag1[i] = true;
                diag2[j] = true;
                backtrack(cols, diag1, diag2, row + 1, n);
                cols[queen] = false;
                diag1[i] = false;
                diag2[j] = false;
            }
        }
    }
}
