public class Solution {
    public int minArea(char[][] image, int x, int y) {
        int minX = findMin(image, 0, x, 'x');
        int maxX = findMax(image, x, image.length - 1, 'x');
        int minY = findMin(image, 0, y, 'y');
        int maxY = findMax(image, y, image[0].length - 1, 'y');
        return (maxX - minX + 1) * (maxY - minY + 1);
    }
    private int findMin(char[][] image, int l, int r, char axis) {
        while (l < r) {
            int m = l + (r - l) / 2;
            if (!hasBlack(image, m, axis))      l = m + 1;
            else    r = m;
        }
        return l;
    }
    private int findMax(char[][] image, int l, int r, char axis) {
        while (l < r) {
            int m = l + (r - l + 1) / 2;
            if (!hasBlack(image, m, axis))      r = m - 1;
            else    l = m;
        }
        return r;
    }
    private boolean hasBlack(char[][]image, int m, char axis) {
        if (axis == 'x') {
            for (int j = 0; j < image[0].length; j++) {
                if (image[m][j] == '1')     return true;
            }
        } else {
            for (int i = 0; i < image.length; i++) {
                if (image[i][m] == '1')     return true;
            }
        }
        return false;
    }
}
