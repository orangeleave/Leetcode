public class Solution {
    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> res = new ArrayList<>();
        Arrays.sort(nums);
        helper(nums, res, new ArrayList<>(), new boolean[nums.length]);
        return res;
    }
    private void helper(int[] nums, List<List<Integer>> res, List<Integer> ele, boolean[] used) {
        if (ele.size() == nums.length) {
            res.add(new ArrayList<>(ele));
        } else {
            for (int i = 0; i < nums.length; i++) {
                if (used[i] || i > 0 && nums[i] == nums[i - 1] && !used[i - 1])     continue;
                used[i] = true;
                ele.add(nums[i]);
                helper(nums, res, ele, used);
                used[i] = false;
                ele.remove(ele.size() - 1);
            }
        }
    }
}
