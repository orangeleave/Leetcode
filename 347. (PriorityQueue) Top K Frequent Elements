public class Solution {
    public List<Integer> topKFrequent(int[] nums, int k) {
        Map<Integer, Integer> map = new HashMap<>();
        for (int num : nums) {
            if (!map.containsKey(num))  map.put(num, 1);
            else    map.put(num, map.get(num) + 1);
        }
        PriorityQueue<Map.Entry<Integer, Integer>> pq = new PriorityQueue<>( 
            new Comparator<Map.Entry<Integer, Integer>>() {
                public int compare(Map.Entry<Integer, Integer> o1, Map.Entry<Integer, Integer> o2) {
                    return o2.getValue() - o1.getValue();
                }
            }
        );
        pq.addAll(map.entrySet());
        List<Integer> res = new ArrayList<>();
        for (int i = 0; i < k; i++)     res.add(pq.poll().getKey());
        return res;
    }
}
